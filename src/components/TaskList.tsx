import React, { useState, useEffect } from "react";
import "./TaskList.css";

interface Task {
  id: number;
  title: string;
  activity: string;
  deadline: string;
  createdDate: string;
  assignee: {
    name: string;
    avatar: string;
  };
  executor: {
    name: string;
    avatar: string;
    additionalCount?: number;
  };
  project: string;
  completed: boolean;
}

interface ColumnConfig {
  id: string;
  label: string;
  visible: boolean;
  category?: "basic" | "dates" | "users" | "project" | "advanced";
}

const TaskList: React.FC = () => {
  const [tasks, setTasks] = useState<Task[]>([
    {
      id: 1,
      title: "–í—Ö–æ–¥—è—â–∞—è –∑–∞—è–≤–∫–∞ –≤ IT-–æ—Ç–¥–µ–ª",
      activity: "14 —Å–µ–Ω—Ç—è–±—Ä—å 15:10",
      deadline: "18 —Å–µ–Ω—Ç—è–±—Ä—å 18:30",
      createdDate: "14 —Å–µ–Ω—Ç—è–±—Ä—å 15:10",
      assignee: {
        name: "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ë.",
        avatar: "üë§"
      },
      executor: {
        name: "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ë.",
        avatar: "üë§",
        additionalCount: 3
      },
      project: "–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
      completed: false
    },
    {
      id: 2,
      title: "–í—Ö–æ–¥—è—â–∞—è –∑–∞—è–≤–∫–∞ –≤ IT-–æ—Ç–¥–µ–ª",
      activity: "14 –¥–µ–∫–∞–±—Ä—å 15:10",
      deadline: "18 –¥–µ–∫–∞–±—Ä—å 18:30",
      createdDate: "14 –¥–µ–∫–∞–±—Ä—å 15:10",
      assignee: {
        name: "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ë.",
        avatar: "üë§"
      },
      executor: {
        name: "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ë.",
        avatar: "üë§"
      },
      project: "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ OmniFlow. –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
      completed: false
    },
    {
      id: 3,
      title: "–í—Ö–æ–¥—è—â–∞—è –∑–∞—è–≤–∫–∞ –≤ IT-–æ—Ç–¥–µ–ª",
      activity: "14 –Ω–æ—è–±—Ä—å 15:10",
      deadline: "18 –Ω–æ—è–±—Ä—å 18:30",
      createdDate: "14 –Ω–æ—è–±—Ä—å 15:10",
      assignee: {
        name: "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ë.",
        avatar: "üë§"
      },
      executor: {
        name: "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ë.",
        avatar: "üë§"
      },
      project: "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ OmniFlow. –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
      completed: false
    },
    {
      id: 4,
      title: "–í—Ö–æ–¥—è—â–∞—è –∑–∞—è–≤–∫–∞ –≤ IT-–æ—Ç–¥–µ–ª",
      activity: "14 –Ω–æ—è–±—Ä—å 15:10",
      deadline: "18 –Ω–æ—è–±—Ä—å 18:30",
      createdDate: "14 –Ω–æ—è–±—Ä—å 15:10",
      assignee: {
        name: "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ë.",
        avatar: "üë§"
      },
      executor: {
        name: "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ë.",
        avatar: "üë§"
      },
      project: "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ OmniFlow. –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
      completed: false
    },
    {
      id: 5,
      title: "–í—Ö–æ–¥—è—â–∞—è –∑–∞—è–≤–∫–∞ –≤ IT-–æ—Ç–¥–µ–ª",
      activity: "14 –Ω–æ—è–±—Ä—å 15:10",
      deadline: "18 –Ω–æ—è–±—Ä—å 18:30",
      createdDate: "14 –Ω–æ—è–±—Ä—å 15:10",
      assignee: {
        name: "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ë.",
        avatar: "üë§"
      },
      executor: {
        name: "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ë.",
        avatar: "üë§"
      },
      project: "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ OmniFlow. –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
      completed: false
    },
    {
      id: 6,
      title: "–í—Ö–æ–¥—è—â–∞—è –∑–∞—è–≤–∫–∞ –≤ IT-–æ—Ç–¥–µ–ª",
      activity: "14 –Ω–æ—è–±—Ä—å 15:10",
      deadline: "18 –Ω–æ—è–±—Ä—å 18:30",
      createdDate: "14 –Ω–æ—è–±—Ä—å 15:10",
      assignee: {
        name: "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ë.",
        avatar: "üë§"
      },
      executor: {
        name: "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ë.",
        avatar: "üë§"
      },
      project: "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ OmniFlow. –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
      completed: false
    }
  ]);

  const [selectedTasks, setSelectedTasks] = useState<number[]>([]);
  const [isColumnSettingsOpen, setIsColumnSettingsOpen] = useState(false);
  const [isNewTaskOpen, setIsNewTaskOpen] = useState(false);
  const [isAdditionalOpen, setIsAdditionalOpen] = useState(false);
  const [isBulkMenuOpen, setIsBulkMenuOpen] = useState(false);
  const [isTaskDetailOpen, setIsTaskDetailOpen] = useState(false);
  const [selectedTask, setSelectedTask] = useState<Task | null>(null);
  const [newTaskForm, setNewTaskForm] = useState({
    title: "",
    description: "",
    isImportant: false,
    assignee: "",
    coExecutors: [] as string[],
    observers: [] as string[],
    startDate: "",
    deadline: "",
    duration: "",
    shouldNotCompleteWithoutResult: false,
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    project: "",
    timeTracking: false,
    isRecurring: false,
    recurringType: "daily",
    repeatEveryDays: 1,
    hasEndDate: false,
    endDate: "",
    repeatAfterCompletion: false,
    reminder: false,
    reminderTime: "",
    tags: [] as string[],
    customFields: [] as { name: string; value: string }[]
  });

  const [columns, setColumns] = useState<ColumnConfig[]>([
    { id: "id", label: "ID", visible: false, category: "basic" },
    { id: "name", label: "–ù–∞–∑–≤–∞–Ω–∏–µ", visible: true, category: "basic" },
    { id: "activity", label: "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", visible: true, category: "basic" },
    {
      id: "created",
      label: "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è",
      visible: false,
      category: "dates"
    },
    {
      id: "changed",
      label: "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è",
      visible: false,
      category: "dates"
    },
    { id: "closed", label: "–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è", visible: false, category: "dates" },
    { id: "deadline", label: "–ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫", visible: true, category: "dates" },
    { id: "assignee", label: "–ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫", visible: false, category: "users" },
    { id: "executor", label: "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", visible: true, category: "users" },
    { id: "status", label: "–°—Ç–∞—Ç—É—Å", visible: false, category: "basic" },
    { id: "project", label: "–ü—Ä–æ–µ–∫—Ç", visible: true, category: "project" },
    { id: "stream", label: "–ü–æ—Ç–æ–∫", visible: true, category: "project" },
    {
      id: "spentTime",
      label: "–ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è",
      visible: false,
      category: "advanced"
    },
    {
      id: "taskCompletion",
      label: "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏",
      visible: false,
      category: "advanced"
    },
    { id: "tags", label: "–¢–µ–≥–∏", visible: false, category: "basic" },
    { id: "leader", label: "–õ–∏–¥", visible: false, category: "users" },
    { id: "contact", label: "–ö–æ–Ω—Ç–∞–∫—Ç", visible: false, category: "users" },
    { id: "company", label: "–ö–æ–º–ø–∞–Ω–∏—è", visible: true, category: "project" },
    { id: "deal", label: "–°–¥–µ–ª–∫–∞", visible: false, category: "advanced" },
    {
      id: "trackTime",
      label: "–£—á–∏—Ç—ã–≤–∞—Ç—å –≤—Ä–µ–º—è",
      visible: false,
      category: "advanced"
    },
    { id: "estimate", label: "–û—Ü–µ–Ω–∫–∞", visible: false, category: "advanced" },
    {
      id: "allowExecutorChangeDeadline",
      label: "–†–∞–∑—Ä–µ—à–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –º–µ–Ω—è—Ç—å –∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫",
      visible: false,
      category: "advanced"
    },
    {
      id: "crmElements",
      label: "–≠–ª–µ–º–µ–Ω—Ç—ã CRM",
      visible: false,
      category: "advanced"
    },
    { id: "comments", label: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", visible: false, category: "basic" }
  ]);

  const handleTaskSelect = (taskId: number) => {
    setSelectedTasks((prev) =>
      prev.includes(taskId)
        ? prev.filter((id) => id !== taskId)
        : [...prev, taskId]
    );
  };

  const handleSelectAll = () => {
    setSelectedTasks(
      selectedTasks.length === tasks.length ? [] : tasks.map((t) => t.id)
    );
  };

  const handleColumnToggle = (columnId: string) => {
    setColumns((prev) =>
      prev.map((col) =>
        col.id === columnId ? { ...col, visible: !col.visible } : col
      )
    );
  };

  const handleSelectAllColumns = () => {
    const allVisible = columns.every((col) => col.visible);
    setColumns((prev) => prev.map((col) => ({ ...col, visible: !allVisible })));
  };

  const handleCancelAllColumns = () => {
    setColumns((prev) => prev.map((col) => ({ ...col, visible: false })));
  };

  const handleApplyColumns = () => {
    setIsColumnSettingsOpen(false);
  };

  const handleResetToDefault = () => {
    // –°–±—Ä–æ—Å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    setColumns((prev) =>
      prev.map((col) => ({
        ...col,
        visible: [
          "name",
          "activity",
          "deadline",
          "executor",
          "project",
          "stream",
          "company"
        ].includes(col.id)
      }))
    );
  };

  const resetTaskForm = () => {
    setNewTaskForm({
      title: "",
      description: "",
      isImportant: false,
      assignee: "",
      coExecutors: [],
      observers: [],
      startDate: "",
      deadline: "",
      duration: "",
      shouldNotCompleteWithoutResult: false,
      project: "",
      timeTracking: false,
      isRecurring: false,
      recurringType: "daily",
      repeatEveryDays: 1,
      hasEndDate: false,
      endDate: "",
      repeatAfterCompletion: false,
      reminder: false,
      reminderTime: "",
      tags: [],
      customFields: []
    });
  };

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as HTMLElement;
      if (isBulkMenuOpen && !target.closest('.task-list__bulk-dropdown')) {
        setIsBulkMenuOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isBulkMenuOpen]);

  const handleNewTaskSubmit = () => {
    if (newTaskForm.title.trim()) {
      const newTask: Task = {
        id: Date.now(),
        title: newTaskForm.title,
        activity: new Date().toLocaleDateString("ru-RU"),
        deadline: newTaskForm.deadline || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        createdDate: new Date().toLocaleDateString("ru-RU"),
        assignee: {
          name: newTaskForm.assignee || "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω",
          avatar: "üë§"
        },
        executor: {
          name: newTaskForm.assignee || "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω",
          avatar: "üë§"
        },
        project: "–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç",
        completed: false
      };

      setTasks((prev) => [newTask, ...prev]);
      setIsNewTaskOpen(false);
      setIsAdditionalOpen(false);
      resetTaskForm();
    }
  };

  const handleNewTaskCancel = () => {
    setIsNewTaskOpen(false);
    setIsAdditionalOpen(false);
    resetTaskForm();
  };

  const handleBulkAction = (action: string) => {
    console.log(`–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏–µ: ${action} –¥–ª—è –∑–∞–¥–∞—á:`, selectedTasks);
    setIsBulkMenuOpen(false);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
  };

  const handleTaskRowClick = (task: Task) => {
    setSelectedTask(task);
    setIsTaskDetailOpen(true);
  };

  const handleTaskDetailClose = () => {
    setIsTaskDetailOpen(false);
    setSelectedTask(null);
  };

  return (
    <div className="task-list">
      <div className="task-list__header">
        <div className="task-list__tabs">
          <button className="task-list__tab task-list__tab--active">
            üìã –°–ø–∏—Å–æ–∫
          </button>
          <button className="task-list__tab">üìä –ö–∞–Ω–±–∞–Ω</button>
          <button className="task-list__tab">üìà –ì–∞–Ω—Ç</button>
        </div>
      </div>

      <div className="task-list__content">
        <div className="task-list__title-section">
          <h1 className="task-list__title">–ú–æ–∏ –∑–∞–¥–∞—á–∏</h1>
        </div>

        <div className="task-list__toolbar">
          <div className="task-list__search">
            <div className="task-list__search-icon">üîç</div>
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –∑–∞–¥–∞—á–∞–º"
              className="task-list__search-input"
            />
          </div>
          <div className="task-list__toolbar-actions">
            <button className="task-list__settings-button">‚öôÔ∏è</button>
            <button
              className="task-list__add-button"
              onClick={() => setIsNewTaskOpen(true)}>
              + –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞
            </button>
          </div>
        </div>

        <div className="task-list__table">
          <div className="task-list__table-header">
            <div className="task-list__header-cell task-list__header-cell--checkbox">
              <input
                type="checkbox"
                checked={selectedTasks.length === tasks.length}
                onChange={handleSelectAll}
                className="task-list__checkbox"
              />
              <button
                className="task-list__settings-btn"
                onClick={() => setIsColumnSettingsOpen(true)}>
                ‚öôÔ∏è
              </button>
            </div>
            <div className="task-list__header-cell task-list__header-cell--name">
              –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
            </div>
            <div className="task-list__header-cell">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</div>
            <div className="task-list__header-cell">–ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫</div>
            <div className="task-list__header-cell">–ó–∞–∫–∞–∑—á–∏–∫</div>
            <div className="task-list__header-cell">–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</div>
            <div className="task-list__header-cell">–ü—Ä–æ–µ–∫—Ç</div>
          </div>

          <div className="task-list__table-body">
            {tasks.map((task) => (
              <div 
                key={task.id} 
                className="task-list__row"
                onClick={() => handleTaskRowClick(task)}
              >
                <div className="task-list__cell task-list__cell--checkbox">
                  <input 
                    type="checkbox"
                    checked={selectedTasks.includes(task.id)}
                    onChange={() => handleTaskSelect(task.id)}
                    onClick={(e) => e.stopPropagation()}
                    className="task-list__checkbox"
                  />
                  <button className="task-list__row-menu">‚öôÔ∏è</button>
                </div>                <div className="task-list__cell task-list__cell--name">
                  <span className="task-list__task-title">{task.title}</span>
                </div>

                <div className="task-list__cell">
                  <span className="task-list__date">{task.activity}</span>
                </div>

                <div className="task-list__cell">
                  <span className="task-list__date">{task.deadline}</span>
                </div>

                <div className="task-list__cell">
                  <div className="task-list__user">
                    <div className="task-list__avatar">
                      {task.assignee.avatar}
                    </div>
                    <span className="task-list__user-name">
                      {task.assignee.name}
                    </span>
                  </div>
                </div>

                <div className="task-list__cell">
                  <div className="task-list__user">
                    <div className="task-list__avatar">
                      {task.executor.avatar}
                    </div>
                    <span className="task-list__user-name">
                      {task.executor.name}
                    </span>
                    {task.executor.additionalCount && (
                      <span className="task-list__additional-count">
                        +{task.executor.additionalCount}
                      </span>
                    )}
                  </div>
                </div>

                <div className="task-list__cell">
                  <span className="task-list__project">{task.project}</span>
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="task-list__footer">
          <div className="task-list__bulk-actions">
            <div className="task-list__bulk-dropdown">
              <button 
                className="task-list__bulk-select"
                onClick={() => setIsBulkMenuOpen(!isBulkMenuOpen)}
              >
                –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚åÑ
              </button>
              {isBulkMenuOpen && (
                <div className="task-list__bulk-menu">
                  <button 
                    className="task-list__bulk-option"
                    onClick={() => handleBulkAction('ping')}
                  >
                    –ü–∏–Ω–≥
                  </button>
                  <button 
                    className="task-list__bulk-option"
                    onClick={() => handleBulkAction('complete')}
                  >
                    –ó–∞–≤–µ—Ä—à–∏—Ç—å
                  </button>
                  <button 
                    className="task-list__bulk-option"
                    onClick={() => handleBulkAction('set-deadline')}
                  >
                    –£–∫–∞–∑–∞—Ç—å –∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫
                  </button>
                  <button 
                    className="task-list__bulk-option"
                    onClick={() => handleBulkAction('move-deadline-forward')}
                  >
                    –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ –≤–ø–µ—Ä—ë–¥
                  </button>
                  <button 
                    className="task-list__bulk-option"
                    onClick={() => handleBulkAction('move-deadline-back')}
                  >
                    –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ –Ω–∞–∑–∞–¥
                  </button>
                  <button 
                    className="task-list__bulk-option"
                    onClick={() => handleBulkAction('control-after-completion')}
                  >
                    –ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                  </button>
                  <button className="task-list__bulk-option task-list__bulk-option--dotted">
                    –ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ—Å–ª–µ
                  </button>
                  <button 
                    className="task-list__bulk-option task-list__bulk-option--expandable"
                    onClick={() => setIsBulkMenuOpen(false)}
                  >
                    –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚åÉ
                  </button>
                </div>
              )}
            </div>
            <span className="task-list__selected-count">
              –û—Ç–º–µ—á–µ–Ω–æ: {selectedTasks.length}
            </span>
            <span className="task-list__total-count">
              –í—Å–µ–≥–æ: {tasks.length}
            </span>
          </div>

          <div className="task-list__pagination">
            <button className="task-list__pagination-btn">‚Äπ</button>
            <span className="task-list__pagination-info">–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ</span>
            <select className="task-list__pagination-select">
              <option>1</option>
              <option>2</option>
              <option>3</option>
            </select>
            <button className="task-list__pagination-btn">‚Ä∫</button>
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ */}
      {isNewTaskOpen && (
        <div className="new-task-modal">
          <div
            className="new-task-modal__overlay"
            onClick={handleNewTaskCancel}
          />
          <div className="new-task-modal__content">
            <div className="new-task-modal__header">
              <h3 className="new-task-modal__title">–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞</h3>
              <button
                className="new-task-modal__close"
                onClick={handleNewTaskCancel}>
                ‚úï
              </button>
            </div>

            <div className="new-task-modal__body">
              <div className="new-task-form">
                <div className="new-task-field">
                  <input
                    type="text"
                    placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
                    value={newTaskForm.title}
                    onChange={(e) =>
                      setNewTaskForm((prev) => ({
                        ...prev,
                        title: e.target.value
                      }))
                    }
                    className="new-task-input new-task-input--title"
                  />
                </div>

                <div className="new-task-field">
                  <textarea
                    placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"
                    value={newTaskForm.description}
                    onChange={(e) =>
                      setNewTaskForm((prev) => ({
                        ...prev,
                        description: e.target.value
                      }))
                    }
                    className="new-task-textarea"
                    rows={4}
                  />
                </div>

                <div className="new-task-field">
                  <button className="new-task-file-btn">
                    üìé –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª
                  </button>
                </div>

                <div className="new-task-field">
                  <label className="new-task-checkbox-label">
                    <input
                      type="checkbox"
                      checked={newTaskForm.isImportant}
                      onChange={(e) =>
                        setNewTaskForm((prev) => ({
                          ...prev,
                          isImportant: e.target.checked
                        }))
                      }
                      className="new-task-checkbox"
                    />
                    <span>–í–∞–∂–Ω–∞—è –∑–∞–¥–∞—á–∞</span>
                  </label>
                </div>

                <div className="new-task-field">
                  <button className="new-task-add-btn new-task-add-btn--executor">
                    + –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
                  </button>
                </div>

                <div className="new-task-row">
                  <button className="new-task-add-btn new-task-add-btn--coexecutor">
                    + –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞
                  </button>
                  <button className="new-task-add-btn new-task-add-btn--coexecutor">
                    + –î–æ–±–∞–≤–∏—Ç—å —Å–æ–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
                  </button>
                  <button className="new-task-add-btn new-task-add-btn--observer">
                    + –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
                  </button>
                </div>

                <div className="new-task-row">
                  <div className="new-task-date-field">
                    <input
                      type="date"
                      value={newTaskForm.startDate}
                      onChange={(e) =>
                        setNewTaskForm((prev) => ({
                          ...prev,
                          startDate: e.target.value
                        }))
                      }
                      className="new-task-date-input"
                    />
                    <span className="new-task-date-label">–ù–∞—á–∞–ª–æ</span>
                  </div>
                  <div className="new-task-date-field">
                    <input
                      type="date"
                      value={newTaskForm.deadline}
                      onChange={(e) =>
                        setNewTaskForm((prev) => ({
                          ...prev,
                          deadline: e.target.value
                        }))
                      }
                      className="new-task-date-input"
                    />
                    <span className="new-task-date-label">–ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫</span>
                  </div>
                  <div className="new-task-duration-field">
                    <select
                      value={newTaskForm.duration}
                      onChange={(e) =>
                        setNewTaskForm((prev) => ({
                          ...prev,
                          duration: e.target.value
                        }))
                      }
                      className="new-task-duration-select">
                      <option value="">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</option>
                      <option value="1">1 –¥–µ–Ω—å</option>
                      <option value="7">1 –Ω–µ–¥–µ–ª—è</option>
                      <option value="30">1 –º–µ—Å—è—Ü</option>
                    </select>
                    <button
                      className="new-task-more-btn"
                      onClick={() => setIsAdditionalOpen(!isAdditionalOpen)}>
                      ‚ãØ –ï—â—ë
                    </button>
                  </div>
                </div>

                <div className="new-task-field">
                  <label className="new-task-checkbox-label">
                    <input
                      type="checkbox"
                      checked={newTaskForm.shouldNotCompleteWithoutResult}
                      onChange={(e) =>
                        setNewTaskForm((prev) => ({
                          ...prev,
                          shouldNotCompleteWithoutResult: e.target.checked
                        }))
                      }
                      className="new-task-checkbox"
                    />
                    <span>–ù–µ –∑–∞–≤–µ—Ä—à–∞—Ç—å –∑–∞–¥–∞—á—É –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞</span>
                  </label>
                </div>

                <div className="new-task-additional">
                  <button
                    className="new-task-additional-toggle"
                    onClick={() => setIsAdditionalOpen(!isAdditionalOpen)}>
                    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ü—Ä–æ–µ–∫—Ç, —É—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏, –Ω–∞–ø–æ–º–Ω–∏—Ç—å, –ø–æ–≤—Ç–æ—Ä—è—Ç—å,
                    –≥–∞–Ω—Ç, CRM, –ø–æ–¥–∑–∞–¥–∞—á–∞, —Ç–µ–≥–∏, –ø–æ–ª—è{" "}
                    {isAdditionalOpen ? "‚åÉ" : "‚åÑ"}
                  </button>
                </div>

                {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è */}
                {isAdditionalOpen && (
                  <div className="new-task-additional-fields">
                    <div className="new-task-field">
                      <button className="new-task-add-btn">
                        + –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
                      </button>
                    </div>

                    <div className="new-task-field">
                      <label className="new-task-checkbox-label">
                        <input
                          type="checkbox"
                          checked={newTaskForm.timeTracking}
                          onChange={(e) =>
                            setNewTaskForm((prev) => ({
                              ...prev,
                              timeTracking: e.target.checked
                            }))
                          }
                          className="new-task-checkbox"
                        />
                        <span>–í–µ—Å—Ç–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á</span>
                      </label>
                    </div>

                    <div className="new-task-field">
                      <input
                        type="text"
                        placeholder="–í—ã–±—Ä–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
                        className="new-task-input"
                      />
                    </div>

                    <div className="new-task-field">
                      <label className="new-task-checkbox-label">
                        <input
                          type="checkbox"
                          checked={newTaskForm.isRecurring}
                          onChange={(e) =>
                            setNewTaskForm((prev) => ({
                              ...prev,
                              isRecurring: e.target.checked
                            }))
                          }
                          className="new-task-checkbox"
                        />
                        <span>–°–¥–µ–ª–∞—Ç—å –∑–∞–¥–∞—á—É —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π</span>
                      </label>
                    </div>

                    {newTaskForm.isRecurring && (
                      <div className="new-task-recurring-options">
                        <div className="new-task-recurring-header">
                          <span>–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å</span>
                          <select
                            value={newTaskForm.recurringType}
                            onChange={(e) =>
                              setNewTaskForm((prev) => ({
                                ...prev,
                                recurringType: e.target.value
                              }))
                            }
                            className="new-task-recurring-type">
                            <option value="daily">–î–µ–Ω—å</option>
                            <option value="weekly">–ù–µ–¥–µ–ª—è</option>
                            <option value="monthly">–ú–µ—Å—è—Ü</option>
                          </select>
                          <span>–ö–∞–∂–¥—ã–π</span>
                          <input
                            type="number"
                            value={newTaskForm.repeatEveryDays}
                            onChange={(e) =>
                              setNewTaskForm((prev) => ({
                                ...prev,
                                repeatEveryDays: parseInt(e.target.value) || 1
                              }))
                            }
                            className="new-task-recurring-number"
                            min="1"
                          />
                          <span>–¥–µ–Ω—å —Å –ø–µ—Ä–µ—Ä—ã–≤–æ–º</span>
                        </div>

                        <div className="new-task-field">
                          <button className="new-task-reminder-btn">
                            üîî –í–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å
                          </button>
                        </div>

                        <div className="new-task-field">
                          <label className="new-task-checkbox-label">
                            <input
                              type="checkbox"
                              checked={!newTaskForm.hasEndDate}
                              onChange={(e) =>
                                setNewTaskForm((prev) => ({
                                  ...prev,
                                  hasEndDate: !e.target.checked
                                }))
                              }
                              className="new-task-checkbox"
                            />
                            <span>–ù–µ—Ç –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è</span>
                          </label>
                        </div>

                        <div className="new-task-field">
                          <label className="new-task-checkbox-label">
                            <input
                              type="checkbox"
                              checked={newTaskForm.hasEndDate}
                              onChange={(e) =>
                                setNewTaskForm((prev) => ({
                                  ...prev,
                                  hasEndDate: e.target.checked
                                }))
                              }
                              className="new-task-checkbox"
                            />
                            <span>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è</span>
                          </label>
                          {newTaskForm.hasEndDate && (
                            <input
                              type="date"
                              value={newTaskForm.endDate}
                              onChange={(e) =>
                                setNewTaskForm((prev) => ({
                                  ...prev,
                                  endDate: e.target.value
                                }))
                              }
                              className="new-task-date-input"
                            />
                          )}
                        </div>

                        <div className="new-task-field">
                          <label className="new-task-checkbox-label">
                            <input
                              type="checkbox"
                              checked={newTaskForm.repeatAfterCompletion}
                              onChange={(e) =>
                                setNewTaskForm((prev) => ({
                                  ...prev,
                                  repeatAfterCompletion: e.target.checked
                                }))
                              }
                              className="new-task-checkbox"
                            />
                            <span>–ó–∞–≤–µ—Ä—à–∞—Ç—å –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π</span>
                          </label>
                        </div>

                        <div className="new-task-info">
                          üìã –ó–∞–¥–∞—á–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è –≤ 06:00 (UTC +05:00) –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
                          —Å –º–æ–º–µ–Ω—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è, –±–µ–∑ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
                        </div>

                        <div className="new-task-info">
                          ‚ìò –ó–∞–º–µ—Ç–æ–∫ –ø–æ —É—Å–ª–æ–≤–∏—è–º –∑–∞–¥–∞—á –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–∞—Ç
                        </div>

                        <div className="new-task-buttons-row">
                          <button className="new-task-add-btn">
                            + –î–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç
                          </button>
                          <button className="new-task-add-btn">+ CRM</button>
                        </div>

                        <div className="new-task-field">
                          <button className="new-task-add-btn">
                            + –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª
                          </button>
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>

            <div className="new-task-modal__footer">
              <button
                className="new-task-btn new-task-btn--secondary"
                onClick={handleNewTaskCancel}>
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                className="new-task-btn new-task-btn--primary"
                onClick={handleNewTaskSubmit}>
                –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ */}
      {isColumnSettingsOpen && (
        <div className="column-settings-modal">
          <div
            className="column-settings-modal__overlay"
            onClick={() => setIsColumnSettingsOpen(false)}
          />
          <div className="column-settings-modal__content">
            <div className="column-settings-modal__header">
              <h3 className="column-settings-modal__title">
                –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
              </h3>
              <button
                className="column-settings-modal__close"
                onClick={() => setIsColumnSettingsOpen(false)}>
                ‚úï
              </button>
            </div>

            <div className="column-settings-modal__body">
              <div className="column-settings-grid">
                {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ */}
                <div className="column-settings-column">
                  {columns
                    .slice(0, Math.ceil(columns.length / 3))
                    .map((column) => (
                      <label key={column.id} className="column-settings-item">
                        <input
                          type="checkbox"
                          checked={column.visible}
                          onChange={() => handleColumnToggle(column.id)}
                          className="column-settings-checkbox"
                        />
                        <span className="column-settings-label">
                          {column.label}
                        </span>
                      </label>
                    ))}
                </div>

                {/* –°—Ä–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞ */}
                <div className="column-settings-column">
                  {columns
                    .slice(
                      Math.ceil(columns.length / 3),
                      Math.ceil((columns.length * 2) / 3)
                    )
                    .map((column) => (
                      <label key={column.id} className="column-settings-item">
                        <input
                          type="checkbox"
                          checked={column.visible}
                          onChange={() => handleColumnToggle(column.id)}
                          className="column-settings-checkbox"
                        />
                        <span className="column-settings-label">
                          {column.label}
                        </span>
                      </label>
                    ))}
                </div>

                {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ */}
                <div className="column-settings-column">
                  {columns
                    .slice(Math.ceil((columns.length * 2) / 3))
                    .map((column) => (
                      <label key={column.id} className="column-settings-item">
                        <input
                          type="checkbox"
                          checked={column.visible}
                          onChange={() => handleColumnToggle(column.id)}
                          className="column-settings-checkbox"
                        />
                        <span className="column-settings-label">
                          {column.label}
                        </span>
                      </label>
                    ))}
                </div>
              </div>
            </div>

            <div className="column-settings-modal__footer">
              <div className="column-settings-footer-left">
                <button
                  className="column-settings-btn column-settings-btn--secondary"
                  onClick={handleResetToDefault}>
                  ‚öôÔ∏è –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                </button>
              </div>

              <div className="column-settings-footer-center">
                <button
                  className="column-settings-btn column-settings-btn--link"
                  onClick={handleSelectAllColumns}>
                  –í—ã–±—Ä–∞—Ç—å –≤—Å–µ
                </button>
                <button
                  className="column-settings-btn column-settings-btn--link"
                  onClick={handleCancelAllColumns}>
                  –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—ë
                </button>
              </div>

              <div className="column-settings-footer-right">
                <button
                  className="column-settings-btn column-settings-btn--primary"
                  onClick={handleApplyColumns}>
                  –ü—Ä–∏–º–µ–Ω–∏—Ç—å
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏ */}
      {isTaskDetailOpen && selectedTask && (
        <div className="task-detail-modal">
          <div className="task-detail-modal__overlay" onClick={handleTaskDetailClose} />
          <div className="task-detail-modal__content">
            <div className="task-detail-modal__header">
              <div className="task-detail-header-left">
                <h3 className="task-detail-modal__title">
                  –ó–∞–¥–∞—á–∞ ‚Ññ {selectedTask.id} - –∂–¥—ë—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                </h3>
                <span className="task-detail-modal__subtitle">
                  {selectedTask.title}
                </span>
              </div>
              <div className="task-detail-header-right">
                <button className="task-detail-action-btn task-detail-action-btn--primary">
                  –ñ–¥—ë—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å 24.01.2025 19:00
                </button>
                <button 
                  className="task-detail-modal__close"
                  onClick={handleTaskDetailClose}
                >
                  ‚úï
                </button>
              </div>
            </div>

            <div className="task-detail-modal__body">
              <div className="task-detail-main">
                <div className="task-detail-left">
                  <div className="task-detail-description">
                    <h4>–û–ø–∏—Å–∞–Ω–∏–µ</h4>
                    <p>–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ BRD_V.3.docx –æ—Ç –ò–≥–æ—Ä—è, –¥–æ–ø–æ–ª–Ω–∏—Ç—å FR –∏ NFR</p>
                  </div>

                  <div className="task-detail-actions">
                    <button className="task-detail-add-btn">
                      üìé –î–æ–±–∞–≤–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç
                    </button>
                  </div>

                  <div className="task-detail-progress">
                    <div className="task-detail-progress-buttons">
                      <button className="task-detail-btn task-detail-btn--start">–ù–∞—á–∞—Ç—å</button>
                      <button className="task-detail-btn task-detail-btn--complete">–ó–∞–≤–µ—Ä—à–∏—Ç—å</button>
                      <button className="task-detail-btn task-detail-btn--favorite">‚ô°</button>
                      <button className="task-detail-btn task-detail-btn--link">üîó</button>
                      <button className="task-detail-btn task-detail-btn--comment">üí¨</button>
                      <button className="task-detail-btn task-detail-btn--more">‚ãØ</button>
                    </div>
                    <span className="task-detail-views">üëÅ 19</span>
                  </div>

                  <div className="task-detail-tabs">
                    <button className="task-detail-tab task-detail-tab--active">
                      –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ 00+
                    </button>
                    <button className="task-detail-tab">–ò—Å—Ç–æ—Ä–∏—è 00+</button>
                    <button className="task-detail-tab">–í—Ä–µ–º—è 00:00:00</button>
                    <button className="task-detail-tab">–ó–∞–º–µ—Ç–∫–∏ 00+</button>
                    <button className="task-detail-tab">–§–∞–π–ª—ã 00+</button>
                  </div>

                  <div className="task-detail-comments">
                    <div className="task-detail-comment">
                      <div className="task-detail-comment-header">
                        <img src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='32' height='32' viewBox='0 0 32 32'%3E%3Ccircle cx='16' cy='16' r='16' fill='%23ccc'/%3E%3C/svg%3E" alt="Avatar" className="task-detail-avatar" />
                        <div className="task-detail-comment-info">
                          <span className="task-detail-username">–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–ø–æ–ª—å—Å–∫–∏–π</span>
                          <span className="task-detail-timestamp">1 –∞–≤–≥—É—Å—Ç–∞</span>
                        </div>
                        <button className="task-detail-comment-menu">‚ãØ</button>
                      </div>
                      <div className="task-detail-comment-content">
                        <p>–¢–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö v.2.0.</p>
                        <a href="#" className="task-detail-file-link">–¢–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö (1).xlsx 11.30 –ö–ë</a>
                        <div className="task-detail-comment-actions">
                          <button>–†–µ–∞–∫—Ü–∏—è</button>
                          <button>–û—Ç–≤–µ—Ç–∏—Ç—å</button>
                        </div>
                      </div>
                    </div>

                    <div className="task-detail-comment">
                      <div className="task-detail-comment-header">
                        <img src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='32' height='32' viewBox='0 0 32 32'%3E%3Ccircle cx='16' cy='16' r='16' fill='%23ccc'/%3E%3C/svg%3E" alt="Avatar" className="task-detail-avatar" />
                        <div className="task-detail-comment-info">
                          <span className="task-detail-username">–†–µ–Ω–∞—Ç–∞ –õ–∏—Ç–≤–∏–Ω–æ–≤–∞</span>
                          <span className="task-detail-timestamp">5 –∞–≤–≥—É—Å—Ç–∞</span>
                        </div>
                        <button className="task-detail-comment-menu">‚ãØ</button>
                      </div>
                      <div className="task-detail-comment-content">
                        <p>–¢–∏–ø–∞ –∞–∫—Ç–∏–≤–∏—Ç–∏ (—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ)</p>
                        <a href="#" className="task-detail-file-link">–ê–∫—Ç–∏–≤–∏—Ç–∏.xlsx 10.85 –ö–ë +2 —Ñ–∞–π–ª–∞</a>
                        <div className="task-detail-comment-actions">
                          <button>–†–µ–∞–∫—Ü–∏—è</button>
                          <button>–û—Ç–≤–µ—Ç–∏—Ç—å</button>
                        </div>
                      </div>
                    </div>

                    <div className="task-detail-comment">
                      <div className="task-detail-comment-header">
                        <img src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='32' height='32' viewBox='0 0 32 32'%3E%3Ccircle cx='16' cy='16' r='16' fill='%23ccc'/%3E%3C/svg%3E" alt="Avatar" className="task-detail-avatar" />
                        <div className="task-detail-comment-info">
                          <span className="task-detail-username">–†–µ–Ω–∞—Ç–∞ –õ–∏—Ç–≤–∏–Ω–æ–≤–∞</span>
                          <span className="task-detail-timestamp">5 –∞–≤–≥—É—Å—Ç–∞</span>
                        </div>
                        <button className="task-detail-comment-menu">‚ãØ</button>
                      </div>
                      <div className="task-detail-comment-content">
                        <p>–¢–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö v.3.0.1</p>
                        <a href="#" className="task-detail-file-link">–¢–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö (2).xlsx 18.04 –ö–ë +30 —Ñ–∞–π–ª–æ–≤</a>
                        <div className="task-detail-comment-actions">
                          <button>–†–µ–∞–∫—Ü–∏—è</button>
                          <button>–û—Ç–≤–µ—Ç–∏—Ç—å</button>
                        </div>
                      </div>
                    </div>

                    <div className="task-detail-comment-input">
                      <img src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='32' height='32' viewBox='0 0 32 32'%3E%3Ccircle cx='16' cy='16' r='16' fill='%23ccc'/%3E%3C/svg%3E" alt="Avatar" className="task-detail-avatar" />
                      <div className="task-detail-input-container">
                        <input 
                          type="text" 
                          placeholder="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..." 
                          className="task-detail-comment-field"
                        />
                        <button className="task-detail-send-btn">‚û§</button>
                      </div>
                    </div>
                  </div>
                </div>

                <div className="task-detail-right">
                  <div className="task-detail-info">
                    <div className="task-detail-info-item">
                      <span className="task-detail-info-label">–ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫</span>
                      <span className="task-detail-info-value">08.08.2025 19:00</span>
                    </div>
                    <div className="task-detail-info-item">
                      <span className="task-detail-info-label">–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</span>
                      <span className="task-detail-info-value">-</span>
                    </div>
                    <div className="task-detail-info-item">
                      <span className="task-detail-info-label">–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è</span>
                      <button className="task-detail-info-arrow">‚û§</button>
                    </div>
                    <div className="task-detail-info-item">
                      <span className="task-detail-info-label">–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ</span>
                      <span className="task-detail-info-value">24.06.2025 13:02</span>
                    </div>
                    <div className="task-detail-info-item">
                      <span className="task-detail-info-label">–û—Ü–µ–Ω–∫–∞</span>
                      <span className="task-detail-info-value">–ù–µ—Ç</span>
                      <a href="#" className="task-detail-info-link">–¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç—á—ë—Ç –æ —Ä–∞–±–æ—Ç–µ</a>
                    </div>
                  </div>

                  <div className="task-detail-participants">
                    <h4>–ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫(–∏)</h4>
                    <div className="task-detail-participant">
                      <img src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='32' height='32' viewBox='0 0 32 32'%3E%3Ccircle cx='16' cy='16' r='16' fill='%23ccc'/%3E%3C/svg%3E" alt="Avatar" className="task-detail-participant-avatar" />
                      <span>–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ö</span>
                    </div>

                    <h4>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å(–∏)</h4>
                    <div className="task-detail-participant">
                      <img src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='32' height='32' viewBox='0 0 32 32'%3E%3Ccircle cx='16' cy='16' r='16' fill='%23ccc'/%3E%3C/svg%3E" alt="Avatar" className="task-detail-participant-avatar" />
                      <span>–ú–∏–∫–∫–∏ –®.</span>
                    </div>

                    <div className="task-detail-participant">
                      <img src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='32' height='32' viewBox='0 0 32 32'%3E%3Ccircle cx='16' cy='16' r='16' fill='%23ccc'/%3E%3C/svg%3E" alt="Avatar" className="task-detail-participant-avatar" />
                      <span>–°–µ—Ä—ë–∑–∞ –ê.</span>
                    </div>

                    <h4>–°–æ–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å(–∏)</h4>
                    <div className="task-detail-participant">
                      <img src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='32' height='32' viewBox='0 0 32 32'%3E%3Ccircle cx='16' cy='16' r='16' fill='%23ccc'/%3E%3C/svg%3E" alt="Avatar" className="task-detail-participant-avatar" />
                      <span>–†–æ–±–µ—Ä—Ç –ü.</span>
                    </div>

                    <div className="task-detail-participant">
                      <img src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='32' height='32' viewBox='0 0 32 32'%3E%3Ccircle cx='16' cy='16' r='16' fill='%23ccc'/%3E%3C/svg%3E" alt="Avatar" className="task-detail-participant-avatar" />
                      <span>–í–∏—Ç–∞–ª–∏–π –ö.</span>
                    </div>

                    <div className="task-detail-participant">
                      <img src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='32' height='32' viewBox='0 0 32 32'%3E%3Ccircle cx='16' cy='16' r='16' fill='%23ccc'/%3E%3C/svg%3E" alt="Avatar" className="task-detail-participant-avatar" />
                      <span>–ù–∏–∫–æ–ª–∞–π –ë.</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default TaskList;
